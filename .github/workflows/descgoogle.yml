name: Fetch Chrome MSI Properties

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  fetch-info:
    runs-on: windows-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
    
    - name: Download Chrome MSI
      run: |
        $url = "https://dl.google.com/dl/chrome/install/googlechromestandaloneenterprise64.msi"
        $outputPath = "googlechromestandaloneenterprise64.msi"
        Invoke-WebRequest -Uri $url -OutFile $outputPath
        Write-Host "Downloaded Chrome MSI"

    - name: Extract and Display All Properties
      run: |
        function Get-MsiTable {
            param([string]$Path, [string]$Table)
            $database = New-Object -ComObject WindowsInstaller.Installer
            $db = $database.GetType().InvokeMember("OpenDatabase", "InvokeMethod", $null, $database, @($Path, 0))
            $view = $db.GetType().InvokeMember("OpenView", "InvokeMethod", $null, $db, $("SELECT * FROM " + $Table))
            $view.Execute()
            $columns = @()
            $view.ColumnInfo | ForEach-Object {
                if ($_.Name -and $_.Name -ne '') {
                    $columns += $_.Name
                }
            }
            if ($columns.Count -eq 0) {
                throw "No columns found in the MSI table $Table"
            }
            $records = @()
            while ($record = $view.Fetch()) {
                $item = New-Object PSObject
                for ($i = 1; $i -le $columns.Count; $i++) {
                    # Add defensive coding to handle potential null values
                    $columnName = $columns[$i - 1]
                    if ($null -ne $columnName -and $columnName -ne '') {
                        $item | Add-Member -MemberType NoteProperty -Name $columnName -Value $record.StringData($i)
                    }
                }
                $records += $item
            }
            return $records
        }

        $msiPath = "googlechromestandaloneenterprise64.msi"
        try {
            $msi = Get-MsiTable -Path $msiPath -Table Property
            $msi | Format-Table -AutoSize | Out-String | Write-Host
        } catch {
            Write-Host "Error extracting properties: $_"
        }
      shell: pwsh
